<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2011 Clarity Services, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    Document   : mongodb-plugin.xml
    Author     : Reid Morrison
    Home Page  : https://github.com/ClarityServices/hyperic-mongodb
    Version    : 1.4
    Description:
        Hyperic HQ Plug-in to monitor MongoDB
-->
<!DOCTYPE plugin [
  <!ENTITY process-metrics SYSTEM "/pdk/plugins/process-metrics.xml">
]>

<plugin>
    <!-- Invoke mongo shell and extract serverStatus -->
    <script name="hq-mongodb-stat">
<![CDATA[
#!/bin/bash

JAVA_SCRIPT=$(cat <<EOF
// Print the number of seconds that this replica is behind
function replicaSecondsBehind() {
  status = rs.status();
  // Extract replica delay for a secondary (slave) in a replica set
  if(status["myState"] == 2) {
    // Obtain optime for master and this replica
    master_optime = null
    my_optime = null

    members = status["members"]
    for(i in members) {
      member = members[i]
      if (member.self == true && member.optime) {
        my_optime = member.optime.t;
      } else if (member.state == 1) {
        master_optime = member.optime.t;
      }
    }
    if (master_optime && my_optime) {
      secs = (master_optime - my_optime) / 1000
      if (secs < 0) {
        secs = 0
      }
      print("replica_seconds_behind="+secs)
    }
  }
};

// Print BSON as name value pairs
function flattenBson(hash, prefix) {
    for(key in hash) {
        value = hash[key];
        klass = Object.prototype.toString.call(value).slice(8, -1);
        if(klass == "bson_object") {
            flattenBson(value, prefix+"_"+key)
        } else {
            print(prefix+"_"+key+"="+value)
        };
    }
};

status = db.serverStatus();
flattenBson(status, "serverStatus");

// Additional metrics only if in a Replica Set
repl = status["repl"];
if(repl != null) {
    flattenBson(db.getReplicationInfo(), "replication_info")
    if(repl["secondary"] == true) {
        replicaSecondsBehind();
    }
};
EOF
)

mongo --host $1 --port $2 --quiet --eval "$JAVA_SCRIPT"
]]>
    </script>
    <property name="SERVER_STATUS" value="exec:timeout=10,file=pdk/work/scripts/mongodb/hq-mongodb-stat,args=%hostname% %port%,exec=%exec%"/>
    <filter name="template" value="${SERVER_STATUS}:${alias}"/>

    <metrics name="MongoDB Utilization">
        <metric name="Connections"
                alias="serverStatus_connections_current"
                category="UTILIZATION"
                indicator="true"/>
        <metric name="Used Disk Space"
                alias="serverStatus_mem_mapped"
                category="UTILIZATION"
                units="MB"
                indicator="true"/>
        <metric name="Replication Delay"
                alias="replica_seconds_behind"
                category="UTILIZATION"
                units="sec"
                indicator="true"/>
        <metric name="Replication oplog"
                alias="replication_info_timeDiff"
                category="UTILIZATION"
                units="sec"/>
    </metrics>

    <metrics name="MongoDB IO">
    <!-- Operations -->
        <metric name="Inserts"
                alias="serverStatus_opcounters_insert"
                category="THROUGHPUT"
                defaultOn="true"
                collectionType="trendsup"
                indicator="true"/>

        <metric name="Queries"
                alias="serverStatus_opcounters_query"
                category="THROUGHPUT"
                defaultOn="true"
                collectionType="trendsup"
                indicator="true"/>

        <metric name="Updates"
                alias="serverStatus_opcounters_update"
                category="THROUGHPUT"
                defaultOn="true"
                collectionType="trendsup"
                indicator="true"/>

        <metric name="Deletes"
                alias="serverStatus_opcounters_delete"
                category="THROUGHPUT"
                defaultOn="true"
                collectionType="trendsup"
                indicator="true"/>

        <metric name="Getmores"
                alias="serverStatus_opcounters_getmore"
                category="THROUGHPUT"
                defaultOn="true"
                collectionType="trendsup"
                indicator="true"/>

        <metric name="Commands"
                alias="serverStatus_opcounters_command"
                category="THROUGHPUT"
                defaultOn="true"
                collectionType="trendsup"
                indicator="true"/>
    </metrics>

    <metrics name="MongoDB Global Lock">
        <metric name="Global Lock Time"
                alias="serverStatus_globalLock_lockTime"
                category="UTILIZATION"
                collectionType="trendsup"
                units="mu"
                indicator="true"/>
        <metric name="Global Lock Queue Total"
                alias="serverStatus_globalLock_currentQueue_total"
                category="UTILIZATION"/>
        <metric name="Global Lock Queue Readers"
                alias="serverStatus_globalLock_currentQueue_readers"
                category="UTILIZATION"/>
        <metric name="Global Lock Queue Writers"
                alias="serverStatus_globalLock_currentQueue_writers"
                category="UTILIZATION"/>
    </metrics>

    <metrics name="MongoDB Index">
        <metric name="Index Accesses"
                alias="serverStatus_indexCounters_btree_accesses"
                category="UTILIZATION"
                collectionType="trendsup"/>
        <metric name="Index Hits"
                alias="serverStatus_indexCounters_btree_hits"
                category="UTILIZATION"
                collectionType="trendsup"/>
        <metric name="Index Misses"
                alias="serverStatus_indexCounters_btree_misses"
                category="UTILIZATION"
                defaultOn="true"
                collectionType="trendsup"
                indicator="true"/>
        <metric name="Index Resets"
                alias="serverStatus_indexCounters_btree_resets"
                category="UTILIZATION"
                collectionType="trendsup"/>
        <metric name="Index Miss Ratio"
                alias="serverStatus_indexCounters_btree_missRatio"
                category="UTILIZATION"
                units="percentage"/>
    </metrics>

    <metrics name="MongoDB Cursors">
        <metric name="Cursors"
                alias="serverStatus_cursors_totalOpen"
                category="UTILIZATION"
                defaultOn="true"
                indicator="true"/>
        <metric name="Cursors Size"
                alias="serverStatus_cursors_clientCursors_size"
                category="UTILIZATION"/>
        <metric name="Cursors Timed Out"
                alias="serverStatus_cursors_timedOut"
                category="UTILIZATION"
                collectionType="trendsup"
                defaultOn="true"
                indicator="true"/>
    </metrics>

    <metrics name="MongoDB Asserts">
        <metric name="Asserts Regular"
                alias="serverStatus_asserts_regular"
                category="UTILIZATION"
                collectionType="trendsup"/>
        <metric name="Asserts Warning"
                alias="serverStatus_asserts_warning"
                category="UTILIZATION"
                collectionType="trendsup"/>
        <metric name="Asserts Msg"
                alias="serverStatus_asserts_msg"
                category="UTILIZATION"
                collectionType="trendsup"/>
        <metric name="Asserts User"
                alias="serverStatus_asserts_user"
                category="UTILIZATION"
                collectionType="trendsup"/>
        <metric name="Asserts Rollovers"
                alias="serverStatus_asserts_rollovers"
                category="UTILIZATION"
                collectionType="trendsup"/>
    </metrics>

    <metrics name="MongoDB Background Flushing">
        <metric name="Flushes"
                alias="serverStatus_backgroundFlushing_flushes"
                category="UTILIZATION"
                collectionType="trendsup"/>
        <metric name="Flush Duration"
                alias="serverStatus_backgroundFlushing_total_ms"
                category="UTILIZATION"
                collectionType="trendsup"
                units="ms"
                indicator="true"/>
        <metric name="Flush Average Duration"
                alias="serverStatus_backgroundFlushing_average_ms"
                category="UTILIZATION"
                units="ms"/>
        <metric name="Flush Last Duration"
                alias="serverStatus_backgroundFlushing_last_ms"
                category="UTILIZATION"
                units="ms"/>
    </metrics>

    <server name="MongoDB" version="1.6">

        <property name="PROC_QUERY" value="State.Name.eq=mongod"/>
        <property name="DEFAULT_CONFIG_FILE" value="/etc/mongod.conf"/>
        <property name="DEFAULT_LOG_FILE" value="/var/log/mongo/mongod.log"/>
        <property name="DEFAULT_DB_PATH" value="/var/lib/mongo"/>

        <config>
            <option name="process.query"
                    description="Process Query"
                    default="${PROC_QUERY}"/>

            <option name="hostname"
                    description="Usually leave as localhost"
                    default="localhost"/>

            <option name="port"
                    description="MongoDB port number"
                    default="27017"/>
        </config>

        <!-- Display inventory properties on the UI -->
        <properties>
            <property name="serverStatus_version"
                      description="MongoDB Version"/>
            <property name="serverStatus_mem_bits"
                      description="MongoDB Build (bits)"/>
            <property name="serverStatus_repl_ismaster"
                      description="MongoDB Master?"/>
        </properties>

        <!--notifies the plugin to auto-discover one instance of each service-->
        <property name="HAS_BUILTIN_SERVICES" value="true"/>

        <plugin type="autoinventory"
                class="org.hyperic.hq.product.DaemonDetector"/>
        <plugin type="measurement"
                class="org.hyperic.hq.product.MeasurementPlugin"/>
        <plugin type="config_track"
                class="org.hyperic.hq.product.ConfigFileTrackPlugin"/>
        <plugin type="log_track"
                class="org.hyperic.hq.product.LogFileTailPlugin"/>

        <metric name="Availability"
                template="sigar:Type=ProcState,Arg=%process.query%:State"
                indicator="true"/>

        <!-- Include mongod process information -->
        &process-metrics;

        <metrics include="MongoDB Utilization"/>
        <metrics include="MongoDB IO"/>
        <metrics include="MongoDB Global Lock"/>
        <metrics include="MongoDB Index"/>
        <metrics include="MongoDB Cursors"/>
        <metrics include="MongoDB Asserts"/>
        <metrics include="MongoDB Background Flushing"/>

    </server>
    <help name="MongoDB">
  Configure Hyperic for monitoring MongoDB.
  The port for Mongodb is by default 27017, please change the port above if required.
  For servers that have more than one MongoDB instance, update the port,
  then change the "process.query" to something like: "State.Name.eq=mongod,Args.*.ew=mongod.conf" where
  mongod.conf must be replaced with the configuration filename for this instance of mongod.
  Hyperic uses the process parameters
  to figure out which mongod instance to monitor. For more information on the valid options, see:
        http://support.hyperic.com/display/SIGAR/PTQL
    </help>

</plugin>
